/******************************************/
/*  Petersons algorithm A simple solution */
/******************************************/

/*
  Description :
    P1 and P2, 2 process
    Q1 & Q2, 2 shared booleans
    TURN, shared value (1 or 2). Depends on numbers of Process
*/

/*
  Initial system state
    - Q1 ::
    - Q2 ::
    - TURN ::
    - P1 P2 :: start code excution
*/


/*******************************************************/
/* Subsystem   : Shared                                */
/* States      : turn1 or turn2                        */
/* Transitions : is/to [1 or 2]                      */
/*******************************************************/

sharedT=[turn1,turn2] {
  etat=2;
  init=0,1;

	0=turn1;
  1=turn2;

  0->0 [isTurn1, toTurn1];
  1->1 [isTurn2, toTurn2];

  1->0 [toTurn1];
  0->1 [toTurn2];
};;

/********************************************************/
/* Subsystem  : Boolean                                 */
/* States     : TRUE or FALSE                           */
/* Transitions: is/to [1 or 2]                        */
/********************************************************/

sharedQ=[True,False] {
  etat=2;
  init=0;
  0=False;
  1=True;

  0->0 [isFalse, toFalse];
  1->1 [isTrue, toTrue];

  0->1 [toTrue];
  1->0 [toFalse];

};;

/****************************************************************************************/
/* Subsystem    : Process                                                               */
/* States       : start (ex: q1 <- TRUE, start2 (ex: t <- turn2, wait, critical or  end */
/* Transitions  : toStart,toStart2,toWait,toCritical,toEnd                              */
/****************************************************************************************/

process=[start,start2,wait,critical,end]{
  etat=5;
  init=0;

  0=start;
  1=start2;
  2=wait;
  3=critical;
  4=end;

  3->0 [toStart]   ;
  0->1 [toStart2]  ;
  1->2 [toWait]    ;
  2->3 [toCritical];
  0->4 [toEnd]     ;
};;
todot processSimple.dot process;;

/**********************************************************/
/* System     : systeme                                   */
/* Processes  : P1 and P2                                 */
/* Protection : Q1 for P1 and Q2 for P2 and TURN for both */
/**********************************************************/


systeme = <process P1,sharedQ Q1,process P2,sharedQ Q2,sharedT TURN> {

  /*Exit state*/
  <toEnd,_,_,_,_> -> p1;
  <_,_,toEnd,_,_> -> p2;

  /*Q <- TRUE*/
  <toStart2,toTrue,_,_,_> -> p1;
  <_,_,toStart2,toTrue,_> -> p2;

  /*Turn <- 1 or 2*/
  <toWait,_,_,_,toTurn1> -> p1;
  <_,_,toWait,_,toTurn2> -> p2;

  /* P1 : wait Q2 == TRUE or TURN == 2*/
  <toCritical,_,_,isFalse,_> -> p1;
  <toCritical,_,_,_,isTurn2> -> p1;

  /* P2 : wait Q1 == TRUE or TURN == 1*/
  <_,isFalse,toCritical,_,_> -> p2;
  <_,_,toCritical,_,isTurn1> -> p2;

  /*Loop..Reset to initial state (start)*/
  <toStart,toFalse,_,_,_> -> p1;
  <_,_,toStart,toFalse,_> -> p2;
};;




//Define CTL to verifiy
//TODO : Moi j'avais la formule en dessous ...  systeme += state_deadlock <- !EX(true) && (P1.wait || P2.wait)					;; //Progress
systeme += state_critical <- P1.critical && P2.critical ;;								 //Mutual Exclusion
systeme += state_deadlock  <- !EX(true) && !(P1.end && P2.end);;					 //Progress
systeme += state_equity <- AG(P1.wait -> EF(P1.critical));;							 //Bounded Waiting
systeme += state_strong_equity<- AG(P1.wait -> AF(P1.critical));;				 //Bounded Waiting

//Assign state to var
deadlock = systeme -> state_deadlock;;
critical = systeme -> state_critical ;;
equity = systeme -> state_equity;;
strong_equity = systeme -> state_strong_equity;;

//Print Result
todot simpleDot/process.dot process;;
todot simpleDot/sharedQ.dot sharedQ;;
todot simpleDot/sharedT.dot sharedT;;

todot simpleDot/system.dot systeme;;

todot simpleDot/deadlock.dot deadlock ;;
todot simpleDot/critical.dot critical ;;
todot simpleDot/equity.dot equity ;;
todot simpleDot/strong_equity.dot strong_equity ;;
