/************************************/
/* Peterson's algorithm with TURN 	*/
/************************************/


/*
 	Description :
 		P1 and P2, 2 process
 		TURN, a shared value 
*/

/*	
	Initial system state 
 	- Turn :: 1, 2
 	- P1 P2 start code excution   
*/


/************************************************/
/* Subsystem  	: Process 		                */
/* States       : critical, mvturn or test 		*/
/* Transitions  : move and loop        			*/
/************************************************/

process=[critical,wait,end]
{
	etat=4;
	init=0;
	2=critical;
	1=wait;
	3=end;					
	0->1[mvturn];			// change TURN value
	1->2[test]; 			// test and wait 	
	2->0;					// enter in critical code section
	2->3[stop];				// stop this code section
};;

todot process.dot process;;

/************************************************/
/* Subsystem  	: Shared 	                    */
/* States       : one::two						*/
/* Transitions  : change or not the TURN value  */
/************************************************/

shared=[one,two]
{
	etat=2;
	init= 0,1;						// 2 initial TURN values 
	0=one;
	1=two;
	0->1[mvturn2];  				// 2nd process changes turn
	1->0[mvturn1];	     			// 1st process changes turn
	0->0[mvturn1, turn1];			// 1st process tests or changes turn for nothing 
	1->1[mvturn2, turn2];			// 2nd process tests or changes turn for nothing
};;

todot shared.dot shared;;


systeme=<process P1, process P2, shared TURN>
{
	<mvturn,_,mvturn1> -> p1;
	<_,mvturn,mvturn2> -> p2;

	<test,_,turn2> -> p1;
	<_,test,turn1> -> p2;

	<stop,_,_> -> p1;		
	<_,stop,_> -> p2;
};;

/*
	deadlock happens when a process is waiting for a TURN value move and the other has left this code section
*/

systeme += deadlock <- !EX(true) && (P1.wait || P2.wait);;	


todot fullsystem.dot systeme;;

reduct = systeme -> deadlock;;

todot reduct.dot reduct;;
