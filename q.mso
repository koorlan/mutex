/****************************************/
/* Peterson's algorithm with Q1 & Q2 	*/
/****************************************/


/*
 	Description :
 		P1 and P2, 2 process
 		Q1 & Q2, 2 shared values
*/

/*
	Initial system state
 	- Q1 ::
 	- Q2 ::
 	- P1 P2 :: start code excution
*/


/********************************************************/
/* Subsystem  	: Process 		      		          	*/
/* States       : critical, mvQ1, mvQ2 or test 			*/
/* Transitions  : move and loop        					*/
/********************************************************/

process=[start,wait,critical,end]
{
	etat=4;
	init=0;
	2=critical;
	1=wait;
	3=end;
	0 = start;

	0->1 [toWait];
	1->2 [toCritical];
	2->0 [toStart];
	0->3 [toEnd];
};;



boolean=[TRUE,FALSE] {
	etat=2;
	init=0,1;
	0=FALSE;
	1=TRUE;

	0->0 [isFalse, toFalse];
	1->1 [isTrue, toTrue];

	0->1 [toTrue];
	1->0 [toFalse];

};;


systeme=<process P1, process P2, boolean Q1, boolean Q2>
{
		<toWait,_,toTrue,_>;
		<_,toWait,_,toTrue>;

		<toCritical,_,_,isFalse>;
		<_,toCritical,isFalse,_>;

		<toStart,_,toFalse,_>;
		<_,toStart,_,toFalse>;

		<toEnd,_,_,_>;
		<_,toEnd,_,_>;
};;

/*
	deadlock happens when a process is waiting for a TURN value move and the other has left this code section
*/

//Define CTL to verifiy
//TODO : Moi j'avais la formule en dessous ...  systeme += state_deadlock <- !EX(true) && (P1.wait || P2.wait)					;; //Progress
systeme += state_critical <- P1.critical && P2.critical 								;; //Mutual Exclusion
systeme += state_deadlock <- !EX(true) && !(P1.end && P2.end)						;; //Progress
systeme += state_equity <- AG(P1.wait -> EF(P1.critical))								;; //Bounded Waiting
systeme += state_strong_equity <- AG(P1.wait -> AF(P1.critical))				;; //Bounded Waiting

//Assign state to var
deadlock = systeme -> state_deadlock;;
critical = systeme -> state_critical ;;
equity = systeme -> state_equity;;
strong_equity = systeme -> state_strong_equity;;

//Print Result
todot primitiveQDot/process.dot process;;
todot primitiveQDot/boolean.dot boolean;;

todot primitiveQDot/system.dot systeme;;

todot primitiveQDot/deadlock.dot deadlock ;;
todot primitiveQDot/critical.dot critical ;;
todot primitiveQDot/equity.dot equity ;;
todot primitiveQDot/strong_equity.dot strong_equity ;;
