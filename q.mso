/****************************************/
/* Peterson's algorithm with Q1 & Q2 	*/
/****************************************/


/*
 	Description :
 		P1 and P2, 2 process
 		Q1 & Q2, 2 shared values 
*/

/*	
	Initial system state 
 	- Q1 :: true / false
 	- Q2 :: true / false
 	- P1 P2 :: start code excution   
*/


/********************************************************/
/* Subsystem  	: Process 		      		          	*/
/* States       : 		*/
/* Transitions  : move and loop        					*/
/********************************************************/

process=[beginning,affectation,test,critical,end]
{
	etat=5;
	init=0;
	0=beginning;
	1=affectation;
	2=test;
	3=critical;
	4=end;					
	0->1[toAff];			// change Q value
	1->2[toTest]; 			// test 	
	2->3[toCrit];			// enter in critical code section
	3->4[toEnd];			// change Q value again
	4->0[toBegin];			// loop
};;

todot process.dot process;;

/************************************************/
/* Subsystem  	: Shared 	                    */
/* States       : isTrue, isFalse				*/
/* Transitions  : change or not the Q values	*/
/************************************************/

shared=[istrue,isfalse]
{
	etat=2;
	init= 0,1;						
	0=istrue;
	1=isfalse;
	0->1[tofalse];  				
	1->0[totrue];
	0->0[ttot];
	1->1[ftof];
};;

todot shared.dot shared;;


systeme=<process P1, process P2, shared Q1, shared Q2>
{
	<toAff,_,totrue,_> -> p1;
	<_,toAff,_,totrue> -> p2;

	<toTest,_,_,_> -> p1;
	<_,toTest,_,_> -> p2;

	<toCrit,_,_,ftof> -> p1;		
	<_,toCrit,ftof,_> -> p2;

	<toEnd,_,tofalse,_> -> p1;		
	<_,toEnd,_,tofalse> -> p2;

	<toBegin,_,_,_> -> p1;		
	<_,toBegin,_,_> -> p2;
};;

/*
	deadlock happens when a process is waiting for a TURN value move and the other has left this code section
*/

systeme += deadlock <- !EX(true) && (P1.test || P2.test);;	


todot fullsystem.dot systeme;;

reduct = systeme -> deadlock;;

todot reduct.dot reduct;;

systeme += mutualexcl <- P1.critical && P2.critical;;
mutex = systeme -> mutualexcl;;

todot mutex.dot mutex;;  
