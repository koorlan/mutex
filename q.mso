/****************************************/
/* Peterson's algorithm with Q1 & Q2 	*/
/****************************************/


/*
 	Description :
 		P1 and P2, 2 process
 		Q1 & Q2, 2 shared values
*/


/*
	Initial system state
 	- Q1 :: true / false
 	- Q2 :: true / false
 	- P1 P2 :: start code excution
*/


/********************************************************/
/* Subsystem  	: Process 		      		          	*/
/* States       : 		*/
/* Transitions  : move and loop        					*/
/********************************************************/


process=[beginning,affectation,test,critical,end]
{
	etat=5;
	init=0;

	0=beginning;
	1=affectation;
	2=test;
	3=critical;
	4=end;

	0->1[toAff];			// change Qi value
	1->2[toTest]; 			// test
	2->3[toCrit];			// enter in critical code section
	3->4[toEnd];			// change Qi value again
	4->0[toBegin];			// loop
};;



/************************************************/
/* Subsystem  	: Shared 	                    */
/* States       : isTrue, isFalse				*/
/* Transitions  : change or not the Q values	*/
/************************************************/

shared=[istrue,isfalse]
{
	etat=2;
	init= 0,1;

	0=istrue;
	1=isfalse;

	0->1[tofalse];
	1->0[totrue];
	0->0[ttot];
	1->1[ftof];
};;


systeme=<process P1, process P2, shared Q1, shared Q2>
{
	<toAff,_,totrue,_> -> p1;
	<_,toAff,_,totrue> -> p2;

	<toTest,_,_,_> -> p1;
	<_,toTest,_,_> -> p2;

	<toCrit,_,_,ftof> -> p1;
	<_,toCrit,ftof,_> -> p2;

	<toEnd,_,tofalse,_> -> p1;
	<_,toEnd,_,tofalse> -> p2;

	<toBegin,_,_,_> -> p1;
	<_,toBegin,_,_> -> p2;
};;



//Define CTL to verifiy

systeme += state_deadlock <- !EX(true) && (P1.test || P2.test)					;; //Progress
systeme += state_critical <- P1.critical && P2.critical 								;; //Mutual Exclusion
systeme += state_equity <- AG(P1.test -> EF(P1.critical))								;; //Bounded Waiting
systeme += state_strong_equity <- AG(P1.test -> AF(P1.critical))				;; //Bounded Waiting

//Assign state to var
deadlock = systeme -> state_deadlock;;
critical = systeme -> state_critical ;;
equity = systeme -> state_equity;;
strong_equity = systeme -> state_strong_equity;;

//Print Result
todot primitiveQDot/process.dot process;;
todot primitiveQDot/shared.dot shared;;

todot primitiveQDot/system.dot systeme;;

todot primitiveQDot/deadlock.dot deadlock ;;
todot primitiveQDot/critical.dot critical ;;
todot primitiveQDot/equity.dot equity ;;
todot primitiveQDot/strong_equity.dot strong_equity ;;
